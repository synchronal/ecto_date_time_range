[doctor]
checks = [
  { check = "homebrew" },
  { check = "tool-versions", command = "plugin-installed", args = { plugin = "erlang" } },
  { check = "tool-versions", command = "plugin-installed", args = { plugin = "elixir" } },
  { check = "tool-versions", command = "plugin-installed", args = { plugin = "postgres" } },
  { check = "tool-versions", command = "package-installed", args = { plugin = "erlang" } },
  { check = "tool-versions", command = "package-installed", args = { plugin = "elixir" } },
  { check = "tool-versions", command = "package-installed", args = { plugin = "postgres" } },
  { check = "postgres", command = "running", args = { user = "${USER}"} },
  { check = "postgres", command = "role-exists", args = { role = "postgres", user = "${USER}" } },
  { check = "postgres", command = "data-directory", args = { data-directory = "./priv/postgres/data" } },
  { check = "elixir", command = "local-hex" },
  { check = "elixir", command = "local-rebar" },
  { check = "elixir", command = "packages-installed" },
]

[test]
checks = [
  { name = "Check for warnings", shell = "mix compile --force --warnings-as-errors" },
  { name = "Elixir tests", shell = "mix test --color --warnings-as-errors --include external:true", verbose = true },
]

[audit]
checks = [
  { name = "Check formatting", shell = "bin/dev/format --check", remedy = "bin/dev/format --all" },
  { step = "elixir", command = "audit-deps" },
  { step = "elixir", command = "credo" },
  { step = "elixir", command = "dialyzer" },
  { check = "elixir", command = "unused-deps" },
]

[outdated]
checks = [
  { check = "elixir" },
]

[update]
steps = [
  { step = "git", command = "pull" },
  { step = "elixir", command = "get-deps" },
  { step = "elixir", command = "compile-deps", args = { mix-env = "dev" } },
  { step = "elixir", command = "compile-deps", args = { mix-env = "test" } },
  { doctor = {} },
  { name = "Build docs", shell = "mix docs" },
]

[shipit]
steps = [
  { audit = {} },
  { update = {} },
  { test = {} },
  { step = "git", command = "push" },
  { step = "github", command = "link-to-actions", verbose = true },
]

